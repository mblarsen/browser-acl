{"version":3,"file":"index.js","sources":["../index.ts"],"sourcesContent":["import {\n  Verb,\n  Subject,\n  SubjectName,\n  SubjectOrTest,\n  Test,\n  Options,\n  Policy,\n} from './types'\n\nconst assumeGlobal = (sub: any): boolean =>\n  typeof sub === 'boolean' ||\n  typeof sub === 'undefined' ||\n  (typeof sub === 'function' && sub.name === '')\n\n/**\n * Simple ACL library for the browser inspired by Laravel's guards and policies.\n */\nclass Acl {\n  static GlobalRule = 'GLOBAL_RULE'\n\n  strict: boolean\n  rules: Map<SubjectName, { [key: string]: Test }>\n  policies: Map<SubjectName | undefined, Policy>\n  registry: WeakMap<Object, string>\n\n  /**\n   * browser-acl\n   *\n   * @access public\n   */\n  constructor({ strict = false }: Options = {}) {\n    this.strict = strict\n    this.rules = new Map()\n    this.policies = new Map()\n    this.registry = new WeakMap()\n  }\n\n  /**\n   * You add rules by providing a verb, a subject and an optional\n   * test (that otherwise defaults to true).\n   *\n   * If the test is a function it will be evaluated with the params:\n   * user, subject, and subjectName. The test value is ultimately evaluated\n   * for truthiness.\n   *\n   * Examples:\n   *\n   * ```javascript\n   * acl.rule('create', Post)\n   * acl.rule('edit', Post, (user, post) => post.userId === user.id)\n   * acl.rule('edit', Post, (user, post, verb, additionalParameter, secondAdditionalParameter) => true)\n   * acl.rule('delete', Post, false) // deleting disabled\n   * acl.rule('purgeInactive', user => user.isAdmin) // global rule\n   * ```\n   *\n   * @access public\n   */\n  rule(verbs: Verb | Verb[], subject: SubjectOrTest, test: Test = true) {\n    let subject_: Subject\n    if (assumeGlobal(subject)) {\n      test = typeof subject === 'undefined' ? true : (subject as Test)\n      subject_ = Acl.GlobalRule\n    } else {\n      subject_ = subject as Subject\n    }\n    const subjectName = this.subjectMapper(subject_)\n    const verbs_ = Array.isArray(verbs) ? verbs : [verbs]\n    verbs_.forEach((verb) => {\n      const rules = this.rules.get(subjectName) || {}\n      rules[verb] = test\n      this.rules.set(subjectName, rules)\n    })\n    return this\n  }\n\n  /**\n   * You can group related rules into policies for a subject. The policies\n   * properties are verbs and they can plain values or functions.\n   *\n   * If the policy is a function it will be new'ed up before use.\n   *\n   * ```javascript\n   *   class Post {\n   *     constructor() {\n   *       this.view = true       // no need for a functon\n   *       this.delete = false    // not really necessary since an abscent\n   *                              // verb has the same result\n   *     }\n   *     beforeAll(verb, user, ...theRest) {\n   *       if (user.isAdmin) {\n   *         return true\n   *       }\n   *       // return nothing (undefined) to pass it on to the other rules\n   *     }\n   *     edit(user, post, verb, additionalParameter, secondAdditionalParameter) {\n   *       return post.id === user.id\n   *     }\n   *   }\n   * ```\n   *\n   * Policies are useful for grouping rules and adding more complex logic.\n   *\n   * @access public\n   */\n  policy(policy: Policy, subject: Subject) {\n    const policy_ =\n      typeof policy === 'function' ? new (policy as any)() : policy\n    const subjectName = this.subjectMapper(subject)\n    this.policies.set(subjectName, policy_)\n    return this\n  }\n\n  /**\n   * Explicitly map a class or constructor function to a name.\n   *\n   * You would want to do this in case your code is heavily\n   * minified in which case the default mapper cannot use the\n   * simple \"reflection\" to resolve the subject name.\n   *\n   * Note: If you override the subjectMapper this is not used,\n   * bud it can be used manually through `this.registry`.\n   *\n   * @access public\n   */\n  register(klass: Function, subjectName: string) {\n    this.registry.set(klass, subjectName)\n    return this\n  }\n\n  /**\n   * Performs a test if a user can perform action on subject.\n   *\n   * The action is a verb and the subject can be anything the\n   * subjectMapper can map to a subject name.\n   *\n   * E.g. if you can to test if a user can delete a post you would\n   * pass the actual post. Where as if you are testing us a user\n   * can create a post you would pass the class function or a\n   * string.\n   *\n   * ```javascript\n   *   acl.can(user, 'create', Post)\n   *   acl.can(user, 'edit', post)\n   *   acl.can(user, 'edit', post, additionalParameter, secondAdditionalParameter)\n   * ```\n   *\n   * Note that these are also available on the user if you've used\n   * the mixin:\n   *\n   * ```javascript\n   *   user.can('create', Post)\n   *   user.can('edit', post)\n   * ```\n   *\n   * @access public\n   */\n  can(\n    user: Object,\n    verb: Verb,\n    subject: Subject | undefined = undefined,\n    ...args: any[]\n  ) {\n    subject = typeof subject === 'undefined' ? Acl.GlobalRule : subject\n    const subjectName = this.subjectMapper(subject)\n\n    const policy = this.policies.get(subjectName)\n    const rules = policy || this.rules.get(subjectName)\n\n    if (typeof rules === 'undefined') {\n      if (this.strict) {\n        throw new Error(`No rules for subject \"${subjectName}\"`)\n      }\n      return false\n    }\n\n    if (policy && typeof policy.beforeAll === 'function') {\n      const result = policy.beforeAll(verb, user, subject, subjectName, ...args)\n      if (typeof result !== 'undefined') {\n        return result\n      }\n    }\n\n    if (typeof rules[verb] === 'function') {\n      return Boolean(rules[verb](user, subject, subjectName, ...args))\n    }\n\n    if (this.strict && typeof rules[verb] === 'undefined') {\n      throw new Error(`Unknown verb \"${verb}\"`)\n    }\n\n    return Boolean(rules[verb])\n  }\n\n  /**\n   * Like can but subject is an array where only some has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   */\n  some(user: object, verb: Verb, subjects: Subject[], ...args: any[]) {\n    return subjects.some((s) => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Like can but subject is an array where all has to be\n   * true for the rule to match.\n   *\n   * Note the subjects do not need to be of the same kind.\n   *\n   * @access public\n   */\n  every(user: Object, verb: Verb, subjects: Subject[], ...args: any[]) {\n    return subjects.every((s) => this.can(user, verb, s, ...args))\n  }\n\n  /**\n   * Mix in augments your user class with a `can` function object. This\n   * is optional and you can always call `can` directly on your\n   * Acl instance.\n   *\n   * ```\n   * user.can()\n   * user.can.some()\n   * user.can.every()\n   * ```\n   *\n   * @access public\n   */\n  mixin(User: Function) {\n    const acl = this\n    User.prototype.can = function (\n      verb: Verb,\n      subject: Subject,\n      ...args: any[]\n    ) {\n      return acl.can(this, verb, subject, ...args)\n    }\n    User.prototype.can.every = function (\n      verb: Verb,\n      subjects: Subject[],\n      ...args: any[]\n    ) {\n      return acl.every(this, verb, subjects, ...args)\n    }\n    User.prototype.can.some = function (\n      verb: Verb,\n      subjects: Subject[],\n      ...args: any[]\n    ) {\n      return acl.some(this, verb, subjects, ...args)\n    }\n    return this\n  }\n\n  /**\n   * Rules are grouped by subjects and this default mapper tries to\n   * map any non falsy input to a subject name.\n   *\n   * This is important when you want to try a verb against a rule\n   * passing in an instance of a class.\n   *\n   * - strings becomes subjects\n   * - function's names are used for subject\n   * - object's constructor name is used for subject\n   *\n   * Override this function if your models do not match this approach.\n   *\n   * E.g. say that you are using plain data objects with a type property\n   * to indicate the type of the object.\n   *\n   * ```javascript\n   *   acl.subjectMapper = s => typeof s === 'string' ? s : s.type\n   * ```\n   *\n   * `can` will now use this function when you pass in your objects.\n   *\n   * ```javascript\n   * acl.rule('edit', 'book', (user, book) => user.id === book.authorId)\n   * const thing = {title: 'The Silmarillion', authorId: 1, type: 'book'}\n   * acl.can(user, 'edit', thing)\n   * ```\n   *\n   * In the example above the 'thing' will follow the rules for 'book'. The\n   * user can edit the book if they are the author.\n   *\n   * See {@link #register register()} for how to manually map\n   * classes to subject name.\n   *\n   * @access public\n   */\n  subjectMapper(subject: Subject): SubjectName {\n    if (typeof subject === 'string') {\n      return subject\n    }\n    if (this.registry.has(subject)) {\n      return this.registry.get(subject)\n    }\n    if (this.registry.has(subject.constructor)) {\n      return this.registry.get(subject.constructor)\n    }\n    if (typeof subject === 'function') {\n      return subject.name\n    }\n    return subject.constructor.name\n  }\n\n  /**\n   * Removes all rules, policies, and registrations\n   */\n  reset() {\n    this.rules = new Map()\n    this.policies = new Map()\n    this.registry = new WeakMap()\n    return this\n  }\n\n  /**\n   * Remove rules for subject\n   *\n   * Optionally limit to a single verb.\n   */\n  removeRules(subject: Subject, verb: Verb | null = null) {\n    const subjectName = this.subjectMapper(subject)\n    if (this.rules.has(subjectName)) {\n      if (verb) {\n        const rules = this.rules.get(subjectName)\n        if (rules) {\n          delete rules[verb]\n        }\n        return this\n      }\n      this.rules.delete(subjectName)\n    }\n    return this\n  }\n\n  /**\n   * Remove policy for subject\n   */\n  removePolicy(subject: Subject) {\n    const subjectName = this.subjectMapper(subject)\n    this.policies.delete(subjectName)\n    return this\n  }\n\n  /**\n   * Convenience method for removing all rules and policies for a subject\n   */\n  removeAll(subject: Subject) {\n    this.removeRules(subject)\n    this.removePolicy(subject)\n    return this\n  }\n}\n\nexport default Acl\n"],"names":["Acl","strict","this","rules","Map","policies","registry","WeakMap","rule","verbs","subject","test","subject_","sub","name","GlobalRule","subjectName","subjectMapper","Array","isArray","forEach","verb","_this","get","set","policy","policy_","register","klass","can","user","undefined","args","Error","beforeAll","result","Boolean","some","subjects","s","_this2","every","_this3","mixin","User","acl","prototype","has","constructor","reset","removeRules","delete","removePolicy","removeAll"],"mappings":"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"}